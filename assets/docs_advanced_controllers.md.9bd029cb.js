import{r as n,o as s,c as a,a as t,w as e,d as o,b as p}from"./app.d80ff392.js";const l='{"title":"Controllers","description":"","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction"},{"level":2,"title":"Writing Controllers","slug":"writing-controllers"},{"level":3,"title":"Basic Controllers","slug":"basic-controllers"},{"level":3,"title":"Multiple Action Controllers","slug":"multiple-action-controllers"},{"level":3,"title":"Resource Controllers","slug":"resource-controllers"}],"relativePath":"docs/advanced/controllers.md","lastUpdated":1630007803013}',c={},i=o('<h1 id="controllers"><a class="header-anchor" href="#controllers" aria-hidden="true">#</a> Controllers</h1><p><div class="table-of-contents"><ul><li><a href="#introduction">Introduction</a></li><li><a href="#writing-controllers">Writing Controllers</a><ul><li><a href="#basic-controllers">Basic Controllers</a></li><li><a href="#multiple-action-controllers">Multiple Action Controllers</a></li><li><a href="#resource-controllers">Resource Controllers</a></li></ul></li></ul></div></p><h2 id="introduction"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Instead of defining all of your request handling logic as closures in your route files, you may wish to organize this behavior using &quot;controller&quot; classes. Controllers can group related request handling logic into a single class. For example, a <code>PostController</code> class might handle all incoming requests related to posts, including showing, creating, updating, and deleting posts. By default, controllers are stored in the <code>app/Http/Controllers</code> directory.</p><h2 id="writing-controllers"><a class="header-anchor" href="#writing-controllers" aria-hidden="true">#</a> Writing Controllers</h2><h3 id="basic-controllers"><a class="header-anchor" href="#basic-controllers" aria-hidden="true">#</a> Basic Controllers</h3><p>Use the <code>make:controller</code> Radiate command to generate a controller.</p><div class="language-"><pre><code>wp radiate make:controller HomepageController\n</code></pre></div><p>The newly generated <code>HomepageController</code> class will be located in your <code>app/Http/Controllers</code> directory.</p><p>Here is an example controller. Note it extends the <code>Radiate\\Routing\\Controller</code>.</p><div class="language-php"><pre><code><span class="token keyword">namespace</span> <span class="token package">Theme<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Radiate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Radiate<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">HomepageController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Handle the controller action\n     *\n     * @param \\Radiate\\Http\\Request $request\n     * @return mixed\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">//</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>You can define a route to this controller like so:</p><div class="language-php"><pre><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token class-name class-name-fully-qualified static-context">Theme<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers<span class="token punctuation">\\</span>HomepageController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>When the route is matched by WordPress, the <code>__invoke</code> method on the <code>App\\Http\\Controllers\\HomepageController</code> class will be called and the <code>Request</code> and any route parameters will be passed to the method.</p>',14),r=t("p",null,[p("By default "),t("code",null,"make:controller"),p(" will generate a controller with an invokable method.")],-1),u=o('<h3 id="multiple-action-controllers"><a class="header-anchor" href="#multiple-action-controllers" aria-hidden="true">#</a> Multiple Action Controllers</h3><p>Some controllers may have multiple methods for different actions. E.g. a <code>PostController</code> may need to show all posts and a single post. To keep this logic contained in the same controller, we define multiple methods to handle each action.</p><div class="language-php"><pre><code><span class="token keyword">class</span> <span class="token class-name-definition class-name">PostController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Show all posts\n     *\n     * @param \\Radiate\\Http\\Request $request\n     * @return mixed\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">//</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * Show a single post\n     *\n     * @param \\Radiate\\Http\\Request $request\n     * @param int $id\n     * @return mixed\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$id</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">//</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>We have defined in <code>index</code> method to show all posts, and a <code>show</code> method that will return one post. Notice how the show method accepts an <code>$id</code> as a parameter. This is a route parameter as seen below.</p><div class="language-php"><pre><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;posts&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name class-name-fully-qualified static-context">Theme<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers<span class="token punctuation">\\</span>PostController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;index&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;posts/{id}&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token class-name class-name-fully-qualified static-context">Theme<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers<span class="token punctuation">\\</span>PostController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;show&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="resource-controllers"><a class="header-anchor" href="#resource-controllers" aria-hidden="true">#</a> Resource Controllers</h3><p>Writing out many routes for the same CRUD actions can be simplified by using a resource controller. Running the <code>make:controller</code> command with the <code>--resource</code> option will generate a resource controller.</p><div class="language-"><pre><code>wp radiate make:controller PostController --resource\n</code></pre></div><p>Here is an example resource controller:</p><div class="language-php"><pre><code><span class="token keyword">namespace</span> <span class="token package">Theme<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Radiate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Radiate<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">PostController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Show multiple resources\n     *\n     * @param \\Radiate\\Http\\Request $request\n     * @return mixed\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">//</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * Show a resource\n     *\n     * @param \\Radiate\\Http\\Request $request\n     * @param int $id\n     * @return mixed\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$id</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">//</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * Store a new resource\n     *\n     * @param \\Radiate\\Http\\Request $request\n     * @return mixed\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">store</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">//</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * Update a resource\n     *\n     * @param \\Radiate\\Http\\Request $request\n     * @param int $id\n     * @return mixed\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$id</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">//</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">/**\n     * Delete a resource\n     *\n     * @param \\Radiate\\Http\\Request $request\n     * @param int $id\n     * @return mixed\n     */</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">destroy</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$id</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">//</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>The controller has <code>index</code>, <code>show</code>, <code>create</code>, <code>update</code> and <code>destroy</code> methods ready to use.</p><p>You can define a resource route to the controller like so:</p><div class="language-php"><pre><code><span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;posts&#39;</span><span class="token punctuation">,</span> <span class="token class-name class-name-fully-qualified static-context">Theme<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers<span class="token punctuation">\\</span>PostController</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>The following routes will be generated:</p><table><thead><tr><th style="text-align:left;">Verb</th><th style="text-align:left;">URI</th><th style="text-align:left;">Action</th></tr></thead><tbody><tr><td style="text-align:left;">GET</td><td style="text-align:left;">/posts</td><td style="text-align:left;">index</td></tr><tr><td style="text-align:left;">GET</td><td style="text-align:left;">/posts/{id}</td><td style="text-align:left;">show</td></tr><tr><td style="text-align:left;">POST</td><td style="text-align:left;">/posts</td><td style="text-align:left;">store</td></tr><tr><td style="text-align:left;">PUT/PATCH</td><td style="text-align:left;">/posts/{id}</td><td style="text-align:left;">update</td></tr><tr><td style="text-align:left;">DELETE</td><td style="text-align:left;">/posts/{id}</td><td style="text-align:left;">destroy</td></tr></tbody></table>',15);c.render=function(o,p,l,c,d,k){const m=n("AppNotice");return s(),a("div",null,[i,t(m,{type:"info"},{default:e((()=>[r])),_:1}),u])};export default c;export{l as __pageData};
