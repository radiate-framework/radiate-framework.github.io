import{r as n,o as s,c as a,a as e,w as t,d as p,b as o}from"./app.d80ff392.js";const c='{"title":"Events","description":"","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction"},{"level":2,"title":"Radiate Commands","slug":"radiate-commands"},{"level":3,"title":"Creating An Event","slug":"creating-an-event"},{"level":3,"title":"Creating A Listener","slug":"creating-a-listener"},{"level":3,"title":"Creating A Subscriber","slug":"creating-a-subscriber"},{"level":2,"title":"Listening To An Event","slug":"listening-to-an-event"},{"level":2,"title":"The Event Service Provider","slug":"the-event-service-provider"},{"level":2,"title":"Event Subscribers","slug":"event-subscribers"},{"level":2,"title":"Subscribers","slug":"subscribers"},{"level":2,"title":"Dispatching An Event","slug":"dispatching-an-event"}],"relativePath":"docs/advanced/events.md","lastUpdated":1630007803013}',i={},l=p('<h1 id="events"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h1><p><div class="table-of-contents"><ul><li><a href="#introduction">Introduction</a></li><li><a href="#radiate-commands">Radiate Commands</a><ul><li><a href="#creating-an-event">Creating An Event</a></li><li><a href="#creating-a-listener">Creating A Listener</a></li><li><a href="#creating-a-subscriber">Creating A Subscriber</a></li></ul></li><li><a href="#listening-to-an-event">Listening To An Event</a></li><li><a href="#the-event-service-provider">The Event Service Provider</a></li><li><a href="#event-subscribers">Event Subscribers</a></li><li><a href="#subscribers">Subscribers</a></li><li><a href="#dispatching-an-event">Dispatching An Event</a></li></ul></div></p><h2 id="introduction"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>WordPress has an events system in the form of actions and filters. <code>do_action</code> and <code>apply_filters</code> are the equivelent of dispatching an event. <code>add_action</code> and <code>add_filter</code> then correspond to listening to an event.</p>',4),r=e("p",null,[o("WordPress actions and filters both use "),e("code",null,"WP_Hook"),o(" behind the scenes. The only difference is that filters MUST return a value.")],-1),u=p('<p>The Radiate Events system is an advanced wrapper around <code>WP_Hook</code> so WordPress actions and filters can be used alongside <code>Events</code> and <code>Listeners</code>. Gone are the days of wondering where to place an <code>add_action</code> callback.</p><p><code>Events</code> are stored in <code>app/Events</code> whilst Listeners<code>are stored in</code>app/Listeners`.</p><h2 id="radiate-commands"><a class="header-anchor" href="#radiate-commands" aria-hidden="true">#</a> Radiate Commands</h2><p>Radiate has commands for generating <code>Events</code>, <code>Listeners</code> and <code>Subscribers</code>.</p><h3 id="creating-an-event"><a class="header-anchor" href="#creating-an-event" aria-hidden="true">#</a> Creating An Event</h3><div class="language-"><pre><code>wp radiate make:event OrderShipped\n</code></pre></div><h3 id="creating-a-listener"><a class="header-anchor" href="#creating-a-listener" aria-hidden="true">#</a> Creating A Listener</h3><div class="language-"><pre><code>wp radiate make:listener SendShipmentNotification\n</code></pre></div><h3 id="creating-a-subscriber"><a class="header-anchor" href="#creating-a-subscriber" aria-hidden="true">#</a> Creating A Subscriber</h3><div class="language-"><pre><code>wp radiate make:subscriber WooCommerceTemplateSubscriber\n</code></pre></div><h2 id="listening-to-an-event"><a class="header-anchor" href="#listening-to-an-event" aria-hidden="true">#</a> Listening To An Event</h2><p>Listening to an event is as simple as calling the <code>listen</code> method on the <code>Events</code> facade.</p><p>It&#39;s possible to listen to a WordPress action/filter:</p><div class="language-php"><pre><code><span class="token class-name static-context">Event</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;plugins_loaded&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>Or listen to a custom <code>Event</code>:</p><div class="language-php"><pre><code><span class="token class-name static-context">Event</span><span class="token operator">::</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>OrderShipped</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="the-event-service-provider"><a class="header-anchor" href="#the-event-service-provider" aria-hidden="true">#</a> The Event Service Provider</h2><p>The <code>EventServiceProvider</code> helps keep all your event logic in one place.</p><div class="language-php"><pre><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>OrderShipped</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Listeners<span class="token punctuation">\\</span>SendShipmentNotification</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n* The event listener mappings for the application.\n*\n* @var array\n*/</span>\n<span class="token keyword">protected</span> <span class="token variable">$listen</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token class-name static-context">OrderShipped</span><span class="token operator">::</span><span class="token keyword">class</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>\n        <span class="token class-name static-context">SendShipmentNotification</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n    <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="event-subscribers"><a class="header-anchor" href="#event-subscribers" aria-hidden="true">#</a> Event Subscribers</h2><div class="language-php"><pre><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Listeners<span class="token punctuation">\\</span>WooCommerceTemplateSubscriber</span><span class="token punctuation">;</span>\n\n<span class="token comment">/**\n* The event subscribers mappings for the application.\n*\n* @var array\n*/</span>\n<span class="token keyword">protected</span> <span class="token variable">$subscribers</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token class-name static-context">WooCommerceTemplateSubscriber</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="subscribers"><a class="header-anchor" href="#subscribers" aria-hidden="true">#</a> Subscribers</h2><p>Subscribers enable related logic to be kept together. For example, if you&#39;re listening to multiple WooCommerce actions, it makes more sense to have one subscriber handle the logic rather than creating multiple listeners.</p><div class="language-php"><pre><code><span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Listeners</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Radiate<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>Dispatcher</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">WooCommerceTemplateSubscriber</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">handle</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Dispatcher</span> <span class="token variable">$events</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token variable">$events</span><span class="token operator">-&gt;</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;woocommere_init&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;wooCommerceInit&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$events</span><span class="token operator">-&gt;</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;woocommere_start_body&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;wooCommerceStartBody&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token variable">$events</span><span class="token operator">-&gt;</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;woocommere_end_body&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token variable">$this</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;wooCommerceEndBody&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">wooCommerceInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">//</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">wooCommerceStartBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">//</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">wooCommerceEndBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">//</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="dispatching-an-event"><a class="header-anchor" href="#dispatching-an-event" aria-hidden="true">#</a> Dispatching An Event</h2><div class="language-php"><pre><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>OrderRecieved</span><span class="token punctuation">;</span>\n\n<span class="token variable">$order</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token class-name static-context">Event</span><span class="token operator">::</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderRecieved</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><p>Using the <code>Dispatchable</code> trait:</p><div class="language-php"><pre><code><span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Events<span class="token punctuation">\\</span>OrderRecieved</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">App<span class="token punctuation">\\</span>Services<span class="token punctuation">\\</span>Order</span><span class="token punctuation">;</span>\n\n<span class="token class-name static-context">OrderRecieved</span><span class="token operator">::</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div>',28);i.render=function(p,o,c,i,d,k){const h=n("AppNotice");return s(),a("div",null,[l,e(h,{type:"info"},{default:t((()=>[r])),_:1}),u])};export default i;export{c as __pageData};
