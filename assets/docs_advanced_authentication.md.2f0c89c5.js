import{r as n,o as a,c as s,a as t,w as e,d as p,b as o}from"./app.d80ff392.js";const c='{"title":"Authentication","description":"","frontmatter":{},"headers":[{"level":2,"title":"Introduction","slug":"introduction"},{"level":2,"title":"Check If The User Is Authenticated","slug":"check-if-the-user-is-authenticated"},{"level":2,"title":"Retrieving The Authenticated User","slug":"retrieving-the-authenticated-user"},{"level":3,"title":"Get The User from The Request","slug":"get-the-user-from-the-request"},{"level":2,"title":"Protecting Routes","slug":"protecting-routes"},{"level":2,"title":"Manually Authenticating Users","slug":"manually-authenticating-users"},{"level":2,"title":"Logging Out","slug":"logging-out"}],"relativePath":"docs/advanced/authentication.md","lastUpdated":1630007803013}',u={},i=p('<h1 id="authentication"><a class="header-anchor" href="#authentication" aria-hidden="true">#</a> Authentication</h1><p><div class="table-of-contents"><ul><li><a href="#introduction">Introduction</a></li><li><a href="#check-if-the-user-is-authenticated">Check If The User Is Authenticated</a></li><li><a href="#retrieving-the-authenticated-user">Retrieving The Authenticated User</a><ul><li><a href="#get-the-user-from-the-request">Get The User from The Request</a></li></ul></li><li><a href="#protecting-routes">Protecting Routes</a></li><li><a href="#manually-authenticating-users">Manually Authenticating Users</a></li><li><a href="#logging-out">Logging Out</a></li></ul></div></p><h2 id="introduction"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Radiate provides an <code>Auth</code> facade for accessing the authenticated user and calling methods such as <code>login</code> and <code>logout</code>.</p><p>The <code>Auth</code> facade is a wrapper around several WordPress functions to make handling user authentication consistent and easy to remember.</p><h2 id="check-if-the-user-is-authenticated"><a class="header-anchor" href="#check-if-the-user-is-authenticated" aria-hidden="true">#</a> Check If The User Is Authenticated</h2><p>The <code>Auth</code> facade has <code>check</code> and <code>guest</code> methods to determine the current status of the user.</p><div class="language-php"><pre><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Radiate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Auth</span><span class="token punctuation">;</span>\n\n<span class="token comment">// determine if the user is logged in</span>\n<span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// determine if the user is logged out</span>\n<span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">guest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre></div>',8),l=t("p",null,[o("Even though it is possible to determine if a user is authenticated using the check method, you will typically use a middleware to verify that the user is authenticated. To learn more about this, check out the documentation on "),t("a",{href:"#protecting-routes"},"protecting routes"),o(".")],-1),r=p('<h2 id="retrieving-the-authenticated-user"><a class="header-anchor" href="#retrieving-the-authenticated-user" aria-hidden="true">#</a> Retrieving The Authenticated User</h2><p>You may access the authenticated user via the <code>user</code> method on the <code>Auth</code> facade. You can also get just the user ID if required.</p><div class="language-php"><pre><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Radiate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Auth</span><span class="token punctuation">;</span>\n\n<span class="token comment">// get the logged in WP_User instance</span>\n<span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// get the logged in user ID</span>\n<span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre></div><h3 id="get-the-user-from-the-request"><a class="header-anchor" href="#get-the-user-from-the-request" aria-hidden="true">#</a> Get The User from The Request</h3><p>The <code>Radiate\\Http\\Request</code> instance provides a <code>user</code> method for retrieving the authenticated user in a controller, middleware or anywhere else in your application.</p>',5),d=t("p",null,[o("REST API routes are stateless so the "),t("code",null,"user"),o(" method will always return false when called from an "),t("code",null,"api"),o(" route.")],-1),k=p('<div class="language-php"><pre><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">namespace</span> <span class="token package">App<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Controllers</span><span class="token punctuation">;</span>\n\n<span class="token keyword">use</span> <span class="token package">Radiate<span class="token punctuation">\\</span>Http<span class="token punctuation">\\</span>Request</span><span class="token punctuation">;</span>\n<span class="token keyword">use</span> <span class="token package">Radiate<span class="token punctuation">\\</span>Routing<span class="token punctuation">\\</span>Controller</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name-definition class-name">DoSomethingController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span>\n<span class="token punctuation">{</span>\n    <span class="token comment">/**\n     * Do something\n     *\n     * @param \\Radiate\\Http\\Request $request\n     * @return mixed\n     */</span>\n    <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token class-name type-declaration">Request</span> <span class="token variable">$request</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$request</span><span class="token operator">-&gt;</span><span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">//</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></code></pre></div><h2 id="protecting-routes"><a class="header-anchor" href="#protecting-routes" aria-hidden="true">#</a> Protecting Routes</h2><p>Route middleware can be used to protect routes from unauthenticated requests. Radiate comes with an <code>auth</code> middleware in the form of <code>Radiate\\Auth\\Middleware\\Authenticate</code>. This middleware can be added to a route group to protect access from unauthenticated requests.</p><div class="language-php"><pre><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Radiate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Route</span><span class="token punctuation">;</span>\n\n<span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">middleware</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;auth&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name static-context">Route</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;/admin&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Only authenticated users may access this route...</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre></div><h2 id="manually-authenticating-users"><a class="header-anchor" href="#manually-authenticating-users" aria-hidden="true">#</a> Manually Authenticating Users</h2><p>It is possible to manually log in a user by passing the authentication credentials to the <code>attempt</code> method on the <code>Auth</code> facade.</p><div class="language-php"><pre><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Radiate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Auth</span><span class="token punctuation">;</span>\n\n<span class="token variable">$credentials</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n    <span class="token string single-quoted-string">&#39;username&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;@admin&#39;</span><span class="token punctuation">,</span>\n    <span class="token string single-quoted-string">&#39;password&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;P@ssw0rd&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token variable">$remember</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">attempt</span><span class="token punctuation">(</span><span class="token variable">$credentials</span><span class="token punctuation">,</span> <span class="token variable">$remember</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//</span>\n<span class="token punctuation">}</span>\n</span></code></pre></div><p>You can also pass a <code>WP_User</code> instance to the <code>login</code> method:</p><div class="language-php"><pre><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Radiate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Auth</span><span class="token punctuation">;</span>\n\n<span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WP_User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token variable">$remember</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$remember</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//</span>\n<span class="token punctuation">}</span>\n</span></code></pre></div><h2 id="logging-out"><a class="header-anchor" href="#logging-out" aria-hidden="true">#</a> Logging Out</h2><p>To manually log users out of your application, you may use the <code>logout</code> method provided by the <code>Auth</code> facade.</p><div class="language-php"><pre><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>\n\n<span class="token keyword">use</span> <span class="token package">Radiate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>Facades<span class="token punctuation">\\</span>Auth</span><span class="token punctuation">;</span>\n\n<span class="token class-name static-context">Auth</span><span class="token operator">::</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span></code></pre></div>',12);u.render=function(p,o,c,u,h,g){const m=n("AppNotice");return a(),s("div",null,[i,t(m,{type:"info"},{default:e((()=>[l])),_:1}),r,t(m,{type:"warning"},{default:e((()=>[d])),_:1}),k])};export default u;export{c as __pageData};
